cmake_minimum_required(VERSION 3.0)

function(probe_arduino_avr_compiler PROBEPATH)
    if(NOT AVR_TOOLCHAIN_PATH)
        if(NOT EXISTS ${PROBEPATH})
           message(STATUS "Directory ${PROBEPATH} does not exist, skipping")
           return()
        endif()
        message(STATUS "Searching for AVR toolchain at ${PROBEPATH}")
        unset(AVR_CXX CACHE)
        unset(AVR_C CACHE)
        unset(AVR_AR CACHE)
        unset(AVR_STRIP CACHE)
        unset(AVR_OBJCOPY CACHE)
        unset(AVR_OBJDUMP CACHE)
        unset(AVR_SIZE CACHE)

        find_program(AVR_CXX avr-g++ PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_C avr-gcc PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_AR avr-ar PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_STRIP avr-strip PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_OBJCOPY avr-objcopy PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_OBJDUMP avr-objdump PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)
        find_program(AVR_SIZE avr-size PATHS "${PROBEPATH}/bin" NO_DEFAULT_PATH)

        foreach(avr_util IN ITEMS AVR_CXX AVR_C AVR_AR AVR_STRIP AVR_OBJCOPY AVR_OBJDUMP AVR_SIZE)
            if(("${${avr_util}}" STREQUAL "${avr_util}-NOTFOUND") OR ("${${avr_util}}" STREQUAL ""))
                message(STATUS "${avr_util} not found")
                return()
            endif()
        endforeach()

        set(AVR_TOOLCHAIN_PATH "${PROBEPATH}/bin" CACHE INTERNAL "AVR toolchain autodetected path")
        set(CMAKE_SYSTEM_NAME "Generic" CACHE INTERNAL "CMAKE_SYSTEM_NAME")
        set(CMAKE_CXX_COMPILER ${AVR_CXX} CACHE INTERNAL "CMAKE_CXX_COMPILER")
        set(CMAKE_C_COMPILER ${AVR_C} CACHE INTERNAL "CMAKE_C_COMPILER")
        set(CMAKE_ASM_COMPILER ${AVR_C} CACHE INTERNAL "CMAKE_ASM_COMPILER")
        set(CMAKE_PREFIX_PATH ${PROBEPATH} CACHE INTERNAL "CMAKE_PREFIX_PATH")
    endif()
endfunction(probe_arduino_avr_compiler)

if(WIN32)
    file(TO_CMAKE_PATH "$ENV{LOCALAPPDATA}" ENV_LOCALAPPDATA)
    set(PROGRAMFILES_X86 "ProgramFiles(x86)")
    file(TO_CMAKE_PATH "$ENV{${PROGRAMFILES_X86}}" ENV_PROGRAMFILES_X86)
    file(TO_CMAKE_PATH "$ENV{ProgramFiles}" ENV_PROGRAMFILES)
    file(GLOB AVR_TEST_DIRS
        ${ENV_LOCALAPPDATA}/Arduino*/packages/arduino/tools/avr-gcc/*
        ${ENV_PROGRAMFILES}/Arduino/hardware/tools/avr
        ${ENV_PROGRAMFILES_X86}/Arduino/hardware/tools/avr)
elseif(LINUX)
  message(FATAL_ERROR "TODO")
else()
  message(FATAL_ERROR "This platform is not supported!")
endif ()

foreach (avr_test_dir ${AVR_TEST_DIRS})
    probe_arduino_avr_compiler ("${avr_test_dir}")
endforeach ()
if(NOT AVR_TOOLCHAIN_PATH)
    message(FATAL "Failed to detect valid AVR toolchain directory")
endif()
message(STATUS "Using AVR toolchain at ${AVR_TOOLCHAIN_PATH}")
